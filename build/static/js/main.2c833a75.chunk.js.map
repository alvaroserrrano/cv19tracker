{"version":3,"sources":["utils.js","components/InfoContainer.js","components/Map.js","components/LineGraph.js","components/Table.js","App.js","serviceWorker.js","index.js"],"names":["casesTypeColors","cases","hex","multiplier","recovered","deaths","sortData","data","sort","a","b","formatStat","stat","numeral","format","InfoContainer","title","active","isRed","total","props","Card","onClick","className","CardContent","card__content","Typography","color","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","id","Circle","key","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","parser","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","res","json","fetchData","length","datasets","backgroundColor","borderColor","Table","App","darkMode","setDarkMode","theme","createMuiTheme","palette","setCountries","setCountry","setCountryInfo","tableData","setTableData","setCasesType","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","name","val","iso3","_id","getCountries","changeSelectedCountry","e","countryCode","target","ThemeProvider","CssBaseline","Paper","height","FormControl","Select","variant","onChange","MenuItem","Switch","checked","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2c833a75.chunk.js","sourcesContent":["import React from \"react\";\nimport { Circle, Popup } from \"react-leaflet\";\nimport numeral from \"numeral\";\nconst casesTypeColors = {\n    cases: {\n        hex: \"#c41d30\",\n        multiplier: 800\n    },\n    recovered: {\n        hex: \"#7dd71d\",\n        multiplier: 1200\n    },\n    deaths: {\n        hex: \"#fb4443\",\n        multiplier: 2000\n    }\n};\nexport const sortData = data => {\n    const sortedData = [...data];\n    return sortedData.sort((a, b) => a.cases > b.cases);\n};\n\n// draw circles on the map\nexport const showDataOnMap = (countries, casesType = \"cases\") =>\n    countries.map((country, id) => (\n        <Circle\n            key={id}\n            center={[country.countryInfo.lat, country.countryInfo.long]}\n            fillOpacity={0.4}\n            color={casesTypeColors[casesType].hex}\n            fillColor={casesTypeColors[casesType].hex}\n            radius={\n                Math.sqrt(country[casesType]) *\n                casesTypeColors[casesType].multiplier\n            }\n        >\n            <Popup>\n                <div className=\"info-container\">\n                    <div\n                        className=\"info-flag\"\n                        style={{\n                            backgroundImage: `url(${country.countryInfo.flag})`\n                        }}\n                    ></div>\n                    <div className=\"info-name\">{country.country}</div>\n                    <div className=\"info-confirmed\">\n                        Cases: {numeral(country.cases).format(\"0,0\")}\n                    </div>\n                    <div className=\"info-recovered\">\n                        Recovered: {numeral(country.recovered).format(\"0,0\")}\n                    </div>\n                    <div className=\"info-deaths\">\n                        Deaths: {numeral(country.deaths).format(\"0,0\")}\n                    </div>\n                </div>\n            </Popup>\n        </Circle>\n    ));\nexport const formatStat = stat =>\n    stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\nexport const formatLargeStat = stat => numeral(stat).format(\"0,0\");\n","import React, { useState } from \"react\";\nimport \"../styles/InfoContainer.css\";\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\n\nfunction InfoContainer({ title, active, cases, isRed, total, ...props }) {\n    return (\n        <Card\n            onClick={props.onClick}\n            className={`infoContainer ${active && \"infoContainer--selected\"} ${\n                isRed && \"infoContainer--red\"\n            }`}\n        >\n            <CardContent className=\"card__content\" card__content>\n                <Typography\n                    color=\"textSecondary\"\n                    className=\"infoContainer__title\"\n                >\n                    {title}\n                </Typography>\n                <h2\n                    className={`infoContainer__cases ${\n                        !isRed && \"infoContainer__cases--green\"\n                    }`}\n                >\n                    {cases}\n                </h2>\n                <Typography\n                    className=\"infoContainer__total\"\n                    color=\"textSecondary\"\n                >\n                    {total} Total\n                </Typography>\n            </CardContent>\n        </Card>\n    );\n}\n\nexport default InfoContainer;\n","import React, { useState } from \"react\";\nimport { showDataOnMap } from \"../utils\";\nimport \"../styles/Map.css\";\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\n\nfunction Map({ countries, casesType, center, zoom }) {\n    return (\n        <div className=\"map\">\n            <LeafletMap center={center} zoom={zoom}>\n                <TileLayer\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                ></TileLayer>\n                {showDataOnMap(countries, casesType)}\n            </LeafletMap>\n        </div>\n    );\n}\n\nexport default Map;\n","import React, { useEffect, useState } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n// custom options for the Graph component on the right-hand side.\nconst options = {\n    legend: {\n        display: false\n    },\n    elements: {\n        point: {\n            radius: 0\n        }\n    },\n    maintainAspectRatio: false,\n    tooltips: {\n        mode: \"index\",\n        intersect: false,\n        callbacks: {\n            label: function (tooltipItem, data) {\n                return numeral(tooltipItem.value).format(\"+0,0\");\n            }\n        }\n    },\n    scales: {\n        xAxes: [\n            {\n                type: \"time\",\n                time: {\n                    parser: \"MM/DD/YY\",\n                    tooltipFormat: \"ll\"\n                }\n            }\n        ],\n        yAxes: [\n            {\n                gridLines: {\n                    display: false\n                },\n                ticks: {\n                    callback: function (value, index, values) {\n                        return numeral(value).format(\"0a\");\n                    }\n                }\n            }\n        ]\n    }\n};\n\nconst buildChartData = (data, casesType = \"cases\") => {\n    let chartData = [];\n    let lastDataPoint;\n    for (let date in data.cases) {\n        if (lastDataPoint) {\n            let newDataPoint = {\n                x: date,\n                y: data[casesType][date] - lastDataPoint\n            };\n            chartData.push(newDataPoint);\n        }\n        lastDataPoint = data[casesType][date];\n    }\n    return chartData;\n};\n\nfunction LineGraph({ casesType = \"cases\", ...props }) {\n    const [data, setData] = useState({});\n    useEffect(() => {\n        const fetchData = async () => {\n            await fetch(\n                \"https://disease.sh/v3/covid-19/historical/all?lastdays=120\"\n            )\n                .then(res => res.json())\n                .then(data => {\n                    let chartData = buildChartData(data, casesType);\n                    setData(chartData);\n                });\n        };\n        fetchData();\n    }, [casesType]);\n    return (\n        <div className={props.className}>\n            {data?.length > 0 && (\n                <Line\n                    options={options}\n                    data={{\n                        datasets: [\n                            {\n                                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n                                borderColor: \"#CC1034\",\n                                data: data\n                            }\n                        ]\n                    }}\n                ></Line>\n            )}\n        </div>\n    );\n}\n\nexport default LineGraph;\n","import React, { useState } from \"react\";\nimport numeral from \"numeral\";\nimport \"../styles/Table.css\";\n\nfunction Table({ countries }) {\n    return (\n        <div className=\"table\">\n            {countries.map(({ country, cases }) => (\n                <tr>\n                    <td>{country}</td>\n                    <td>\n                        <strong>{numeral(cases).format(\"0,0\")}</strong>\n                    </td>\n                </tr>\n            ))}\n        </div>\n    );\n}\n\nexport default Table;\n","import React, { useState, useEffect } from \"react\";\nimport \"./styles/App.css\";\nimport { sortData, formatStat, formatLargeStat } from \"./utils\";\nimport InfoContainer from \"./components/InfoContainer\";\nimport Map from \"./components/Map\";\nimport \"leaflet/dist/leaflet.css\";\nimport LineGraph from \"./components/LineGraph\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Table from \"./components/Table\";\nimport {\n    FormControl,\n    Icon,\n    Select,\n    MenuItem,\n    Paper,\n    Switch,\n    ThemeProvider,\n    createMuiTheme,\n    Card,\n    CardContent\n} from \"@material-ui/core\";\n\nfunction App() {\n    const [darkMode, setDarkMode] = useState(true);\n    const theme = createMuiTheme({\n        palette: {\n            type: darkMode ? \"dark\" : \"light\"\n        }\n    });\n    const [countries, setCountries] = useState([]);\n    // use worldwide view by default for the selec\n    const [country, setCountry] = useState(\"worldwide\");\n    const [countryInfo, setCountryInfo] = useState({});\n    const [tableData, setTableData] = useState([]);\n    const [casesType, setCasesType] = useState(\"cases\");\n    const [mapCenter, setMapCenter] = useState({\n        lat: 34.80746,\n        lng: -40.4796\n    });\n    const [mapZoom, setMapZoom] = useState(3);\n    const [mapCountries, setMapCountries] = useState([]);\n    useEffect(() => {\n        fetch(\"https://disease.sh/v3/covid-19/all\")\n            .then(res => res.json())\n            .then(data => {\n                setCountryInfo(data);\n            });\n    }, []);\n    useEffect(() => {\n        const getCountries = async () => {\n            await fetch(\n                \"https://disease.sh/v3/covid-19/countries?yesterday=true&sort=cases\"\n            )\n                .then(res => res.json())\n                .then(data => {\n                    const countries = data.map(country => ({\n                        name: country.country,\n                        val: country.countryInfo.iso3,\n                        id: country._id\n                    }));\n                    const sortedData = sortData(data);\n                    setTableData(data);\n                    setCountries(countries);\n                    setMapCountries(data);\n                });\n        };\n        getCountries();\n    }, []);\n    const changeSelectedCountry = async e => {\n        const countryCode = e.target.value;\n        const url =\n            countryCode === \"worldwide\"\n                ? \"https://disease.sh/v3/covid-19/all\"\n                : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n        await fetch(url)\n            .then(res => res.json())\n            .then(data => {\n                setCountry(countryCode);\n                setCountryInfo(data);\n                setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n                setMapZoom(4);\n            });\n    };\n    return (\n        <ThemeProvider theme={theme}>\n            <CssBaseline />\n            <Paper style={{ height: \"100vh\" }}>\n                <div className=\"app\">\n                    <div className=\"app__left\">\n                        <div className=\"app__header\">\n                            <h1>Covid19 {casesType}</h1>\n                            <FormControl className=\"app__dropdown\">\n                                <Select\n                                    variant=\"filled\"\n                                    value={country}\n                                    onChange={changeSelectedCountry}\n                                >\n                                    <MenuItem value=\"worldwide\">\n                                        Worldwide\n                                    </MenuItem>\n                                    {countries.map(country => (\n                                        <MenuItem\n                                            value={country.val}\n                                            key={country.id}\n                                        >\n                                            {country.name} - {country.val}\n                                        </MenuItem>\n                                    ))}\n                                </Select>\n                            </FormControl>\n                            <Switch\n                                className=\"app__switch\"\n                                checked={darkMode}\n                                onChange={() => setDarkMode(!darkMode)}\n                            ></Switch>\n                        </div>\n                        <div className=\"app__stats\">\n                            <InfoContainer\n                                isRed\n                                active={casesType === \"cases\"}\n                                onClick={e => setCasesType(\"cases\")}\n                                title=\"Coronavirus cases\"\n                                cases={formatStat(countryInfo.todayCases)}\n                                total={formatStat(countryInfo.cases)}\n                            ></InfoContainer>\n                            <InfoContainer\n                                active={casesType === \"recovered\"}\n                                onClick={e => setCasesType(\"recovered\")}\n                                title=\"Recovered\"\n                                cases={formatStat(countryInfo.todayRecovered)}\n                                total={formatStat(countryInfo.recovered)}\n                            ></InfoContainer>\n                            <InfoContainer\n                                isRed\n                                active={casesType === \"deaths\"}\n                                onClick={e => setCasesType(\"deaths\")}\n                                title=\"Deaths\"\n                                cases={formatStat(countryInfo.todayDeaths)}\n                                total={formatStat(countryInfo.deaths)}\n                            ></InfoContainer>\n                        </div>\n                        <Map\n                            countries={mapCountries}\n                            casesType={casesType}\n                            center={mapCenter}\n                            zoom={mapZoom}\n                        ></Map>\n                    </div>\n                    <Card className=\"app__right\">\n                        <CardContent>\n                            <h3>Live cases by country</h3>\n                            <Table countries={tableData}></Table>\n                            <h3 className=\"app__graphTitle\">\n                                Worldwide new {casesType}\n                            </h3>\n                            <LineGraph\n                                className=\"app__graph\"\n                                casesType={casesType}\n                            />\n                        </CardContent>\n                    </Card>\n                </div>\n            </Paper>\n        </ThemeProvider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}